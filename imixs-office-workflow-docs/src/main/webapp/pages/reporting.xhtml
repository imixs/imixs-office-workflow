<ui:composition xmlns="http://www.w3.org/1999/xhtml"
	xmlns:f="http://xmlns.jcp.org/jsf/core"
	xmlns:h="http://xmlns.jcp.org/jsf/html"
	xmlns:c="http://xmlns.jcp.org/jsp/jstl/core"
	xmlns:ui="http://xmlns.jcp.org/jsf/facelets"
	xmlns:pt="http://xmlns.jcp.org/jsf/passthrough"
	xmlns:marty="http://java.sun.com/jsf/composite/marty"
	xmlns:i="http://xmlns.jcp.org/jsf/composite/imixs">

	<!-- Imixs Reports 
	
		For each report defined in the process entity we generate a Chart.js canvas and load the json data for the report  
	.imixs-report
	-->


	<!-- *** display all process nodes where the current user is manager of *** -->
	<ui:repeat value="#{processController.processList}" var="process">
		<h:panelGroup layout="block"
			rendered="#{process.item['isManager'] and (! empty process.item['txtReportList'])}">

			<!-- bulild a portlet for each report -->
			<ui:repeat value="#{process.itemList['txtReportList']}" var="report">
				<!--  We replace the sufix .imixs-report with -imixs-report so that we an use the report name as an ID -->
				<ui:param name="reportid"
					value="#{fn:replace(report,'.imixs-report','-imixs-report')}"></ui:param>
				<div class="imixs-reports col-3">
					<!-- chart header -->
					<div class="imixs-header" id="#{reportid}">
						<div align="right" style="float: right;">
							<a href="javascript:void(0)"
								onclick="loadReportData('#{reportid}',true);"
								title="#{message.refresh}"> <span
								class="typcn typcn-arrow-sync"></span>
							</a>
						</div>
						<h1>...</h1>
					</div>
					<!-- the char canvas -->
					<div id="canvas-container-#{reportid}">
						<canvas id="canvas-#{reportid}"></canvas>
					</div>
				</div>
			</ui:repeat>
		</h:panelGroup>
	</ui:repeat>




	<script type="text/javascript">
		/*<![CDATA[*/

		$(document).ready(function() {
			// find all imxis-report portlets and start to load the report data..
			var allReports = $(".imixs-reports .imixs-header");
    		$(allReports).each(function(index) {
    			var reportname = this.id;
    			// we use the internal browser cache to avoid unecessary ajax calls 
    			loadReportData(reportname,false);
    		});    		    		
		});
	
		
		// This method loads a report and refreshes the corresponding chart diagramm.
		// We use the browser local storage to cache reports
		// The boolean 'refresh==true' indicates if the current cache should be discarded.
		loadReportData = function(reportid, refresh) {
			if (!refresh) {
				var storedDataObject=getStoredDataObject();
				var chartData=null;
				$.each(storedDataObject.report, function( index, value ) {
					// search chartdate entry with same id...
					if (value.id==reportid) {
    					// found!
						chartData=value.data;
    					return false;
					}
    			});
				
				if (chartData) {
					refreshChartDiagramm(reportid,chartData);
					// finish!
					return false;
				}
			}
			
			//console.log("loading chart data '" + reportid + "'...'");
			// get report name with .imixs-report extension form the reportid...
			var report = reportid+".imixs-report";
			var request_url = "#{facesContext.externalContext.requestContextPath}/api/report/" + report+"?pagesize=9999";
			// We replace the sufix .imixs-report with -imixs-report so that we an use the report name as an ID
			$.ajax({
				url : request_url,
				type : "GET",
				dataType : "json"
			}).done(
					function(data) {
						// retrieve data object
			    		var storedDataObject=getStoredDataObject();
						
						// update array or push new data object if not available...
						var found=false;
						$.each(storedDataObject.report, function( index, value ) {
							// search chartdate entry with same id...
							if (value.id==reportid) {
		    					// found!
		    					//console.log("update chart data in local cache...");
								storedDataObject.report[index].data=data;
								found=true;
		    					return false;
							}
		    			});
						if (!found) {
							// push the chart data object together with its id into the storedDadaObject...
				    		//console.log("pushing chart data into local cache....");
						    storedDataObject.report.push({id:reportid, data:data});
						}
			    		
			    		sessionStorage.setItem("imixs-office-wrokflow.report.data", JSON.stringify(storedDataObject));
						refreshChartDiagramm(reportid,data);
					});
			}
		
		
			// This method rebuilds a chart diagramm
			refreshChartDiagramm = function(reportid,data) {
				//console.log("building chart.js diagramm '" + reportid + "'...");
				// update h1 with label
				$("#" + reportid + " h1").text(data.title);
				
				// clear old data (http://stackoverflow.com/questions/24815851/how-to-clear-a-chart-from-a-canvas-so-that-hover-events-cannot-be-triggered#25064035)
				$('#canvas-'+reportid).remove(); // this is my <canvas> element
				$("#canvas-container-"+reportid).append("<canvas id=\"canvas-"+reportid+"\"></canvas>");
				
				var ctx = document.getElementById("canvas-" + reportid)
						.getContext("2d");
			
				if (data.type) {
					// line chart
					 window.report1 = new Chart(ctx,  {
			                type: data.type,
			                data: data,
			                options: data.options
			        });
				} else {
					alert('chart type for report ' + data.datasets[0].label +' is undefined!');
				}
				
			}
			
			
			getStoredDataObject = function() {
				var storedDataObject=null;
				if(typeof(Storage) !== "undefined") {
	    			// retrieve data object from localStorage/sessionStorage.
	    			dataString=sessionStorage.getItem("imixs-office-wrokflow.report.data");
	    			try {
	    				 storedDataObject= JSON.parse(dataString);
	    			} catch(e){
	    				storedDataObject=null;
	    			}
	    			// if the storedDataObject is undefined or not initalized....    
	    			if (!storedDataObject || !storedDataObject.report) {
	    				// ...then initialize the storage-object with an empty dummy array..
	    				storedDataObject={date:"", report:new Array()};		    		
	    			}
				}
				return storedDataObject;
			}

		/*]]>*/
	</script>
</ui:composition>

